// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: score_sheets.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createSheet = `-- name: CreateSheet :one
INSERT INTO score_sheets (
  name, committee_name, chair, vice_chair, rapporteur, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, committee_name, chair, vice_chair, rapporteur, created_by, created_at, updated_at
`

type CreateSheetParams struct {
	Name          string         `json:"name"`
	CommitteeName string         `json:"committee_name"`
	Chair         string         `json:"chair"`
	ViceChair     sql.NullString `json:"vice_chair"`
	Rapporteur    sql.NullString `json:"rapporteur"`
	CreatedBy     int32          `json:"created_by"`
}

func (q *Queries) CreateSheet(ctx context.Context, arg CreateSheetParams) (ScoreSheet, error) {
	row := q.queryRow(ctx, q.createSheetStmt, createSheet,
		arg.Name,
		arg.CommitteeName,
		arg.Chair,
		arg.ViceChair,
		arg.Rapporteur,
		arg.CreatedBy,
	)
	var i ScoreSheet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CommitteeName,
		&i.Chair,
		&i.ViceChair,
		&i.Rapporteur,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSheet = `-- name: DeleteSheet :exec
DELETE FROM score_sheets
WHERE id = $1
`

func (q *Queries) DeleteSheet(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteSheetStmt, deleteSheet, id)
	return err
}

const deleteSheetsByUserID = `-- name: DeleteSheetsByUserID :exec
DELETE FROM score_sheets
WHERE created_by = $1
`

func (q *Queries) DeleteSheetsByUserID(ctx context.Context, createdBy int32) error {
	_, err := q.exec(ctx, q.deleteSheetsByUserIDStmt, deleteSheetsByUserID, createdBy)
	return err
}

const getSheetByID = `-- name: GetSheetByID :one
SELECT id, name, committee_name, chair, vice_chair, rapporteur, created_by, created_at, updated_at FROM score_sheets
WHERE id = $1
`

func (q *Queries) GetSheetByID(ctx context.Context, id int32) (ScoreSheet, error) {
	row := q.queryRow(ctx, q.getSheetByIDStmt, getSheetByID, id)
	var i ScoreSheet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CommitteeName,
		&i.Chair,
		&i.ViceChair,
		&i.Rapporteur,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSheetWithDetailsByID = `-- name: GetSheetWithDetailsByID :one
SELECT
  ss.id, ss.name, ss.committee_name, ss.chair, ss.vice_chair, ss.rapporteur, ss.created_by, ss.created_at, ss.updated_at,
  d.delegates,
  p.parameters,
  s.scores
FROM score_sheets ss

LEFT JOIN LATERAL (
  SELECT json_agg(d) AS delegates
  FROM delegates d
  WHERE d.score_sheet_id = ss.id
) d ON true

LEFT JOIN LATERAL (
  SELECT json_agg(p) AS parameters
  FROM parameters p
  WHERE p.score_sheet_id = ss.id
) p ON true

LEFT JOIN LATERAL (
  SELECT json_agg(s) AS scores
  FROM scores s
  JOIN delegates d2 ON s.delegate_id = d2.id
  JOIN parameters p2 ON s.parameter_id = p2.id
  WHERE d2.score_sheet_id = ss.id
) s ON true

WHERE ss.id = $1
`

type GetSheetWithDetailsByIDRow struct {
	ID            int32           `json:"id"`
	Name          string          `json:"name"`
	CommitteeName string          `json:"committee_name"`
	Chair         string          `json:"chair"`
	ViceChair     sql.NullString  `json:"vice_chair"`
	Rapporteur    sql.NullString  `json:"rapporteur"`
	CreatedBy     int32           `json:"created_by"`
	CreatedAt     sql.NullTime    `json:"created_at"`
	UpdatedAt     sql.NullTime    `json:"updated_at"`
	Delegates     json.RawMessage `json:"delegates"`
	Parameters    json.RawMessage `json:"parameters"`
	Scores        json.RawMessage `json:"scores"`
}

func (q *Queries) GetSheetWithDetailsByID(ctx context.Context, id int32) (GetSheetWithDetailsByIDRow, error) {
	row := q.queryRow(ctx, q.getSheetWithDetailsByIDStmt, getSheetWithDetailsByID, id)
	var i GetSheetWithDetailsByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CommitteeName,
		&i.Chair,
		&i.ViceChair,
		&i.Rapporteur,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Delegates,
		&i.Parameters,
		&i.Scores,
	)
	return i, err
}

const getSheetsByUserID = `-- name: GetSheetsByUserID :many
SELECT id, name, committee_name, chair, vice_chair, rapporteur, created_by, created_at, updated_at FROM score_sheets
WHERE created_by = $1
`

func (q *Queries) GetSheetsByUserID(ctx context.Context, createdBy int32) ([]ScoreSheet, error) {
	rows, err := q.query(ctx, q.getSheetsByUserIDStmt, getSheetsByUserID, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScoreSheet{}
	for rows.Next() {
		var i ScoreSheet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CommitteeName,
			&i.Chair,
			&i.ViceChair,
			&i.Rapporteur,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSheet = `-- name: UpdateSheet :one
UPDATE score_sheets
SET name = COALESCE($1, name),
    committee_name = COALESCE($2, committee_name),
    chair = COALESCE($3, chair),
    vice_chair = COALESCE($4, vice_chair),
    rapporteur = COALESCE($5, rapporteur),
    updated_at = now()
WHERE id = $6
RETURNING id, name, committee_name, chair, vice_chair, rapporteur, created_by, created_at, updated_at
`

type UpdateSheetParams struct {
	Name          sql.NullString `json:"name"`
	CommitteeName sql.NullString `json:"committee_name"`
	Chair         sql.NullString `json:"chair"`
	ViceChair     sql.NullString `json:"vice_chair"`
	Rapporteur    sql.NullString `json:"rapporteur"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateSheet(ctx context.Context, arg UpdateSheetParams) (ScoreSheet, error) {
	row := q.queryRow(ctx, q.updateSheetStmt, updateSheet,
		arg.Name,
		arg.CommitteeName,
		arg.Chair,
		arg.ViceChair,
		arg.Rapporteur,
		arg.ID,
	)
	var i ScoreSheet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CommitteeName,
		&i.Chair,
		&i.ViceChair,
		&i.Rapporteur,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
