// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ai_sessions.sql

package db

import (
	"context"
	"time"
)

const createAISession = `-- name: CreateAISession :one
INSERT INTO ai_sessions (
  user_id, expires_at, prompt, status
) VALUES (
  $1, $2, $3, 'completed'
) 
RETURNING id, user_id, created_at, expires_at, prompt, status
`

type CreateAISessionParams struct {
	UserID    int32     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	Prompt    string    `json:"prompt"`
}

func (q *Queries) CreateAISession(ctx context.Context, arg CreateAISessionParams) (AiSession, error) {
	row := q.queryRow(ctx, q.createAISessionStmt, createAISession, arg.UserID, arg.ExpiresAt, arg.Prompt)
	var i AiSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Prompt,
		&i.Status,
	)
	return i, err
}

const deleteExpiredAISessions = `-- name: DeleteExpiredAISessions :exec
DELETE FROM ai_sessions
WHERE user_id = $1
AND expires_at <= NOW()
`

func (q *Queries) DeleteExpiredAISessions(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteExpiredAISessionsStmt, deleteExpiredAISessions, userID)
	return err
}

const getAISessionsByUserID = `-- name: GetAISessionsByUserID :many
SELECT id, user_id, created_at, expires_at, prompt, status FROM ai_sessions
WHERE user_id = $1
AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetAISessionsByUserID(ctx context.Context, userID int32) ([]AiSession, error) {
	rows, err := q.query(ctx, q.getAISessionsByUserIDStmt, getAISessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AiSession{}
	for rows.Next() {
		var i AiSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Prompt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
