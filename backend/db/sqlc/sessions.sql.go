// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  user_id, jwt_token, refresh_token, expires_at, refresh_expires_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, jwt_token, refresh_token, created_at, expires_at, refresh_expires_at
`

type CreateSessionParams struct {
	UserID           int32        `json:"user_id"`
	JwtToken         string       `json:"jwt_token"`
	RefreshToken     string       `json:"refresh_token"`
	ExpiresAt        sql.NullTime `json:"expires_at"`
	RefreshExpiresAt time.Time    `json:"refresh_expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.UserID,
		arg.JwtToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.RefreshExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RefreshExpiresAt,
	)
	return i, err
}

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSessionByID(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteSessionByIDStmt, deleteSessionByID, id)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteSessionsByUserIDStmt, deleteSessionsByUserID, userID)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, jwt_token, refresh_token, created_at, expires_at, refresh_expires_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id int32) (Session, error) {
	row := q.queryRow(ctx, q.getSessionByIDStmt, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RefreshExpiresAt,
	)
	return i, err
}

const getSessionsByRefreshToken = `-- name: GetSessionsByRefreshToken :one
SELECT id, user_id, jwt_token, refresh_token, created_at, expires_at, refresh_expires_at FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) GetSessionsByRefreshToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionsByRefreshTokenStmt, getSessionsByRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RefreshExpiresAt,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :one
SELECT id, user_id, jwt_token, refresh_token, created_at, expires_at, refresh_expires_at FROM sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID int32) (Session, error) {
	row := q.queryRow(ctx, q.getSessionsByUserIDStmt, getSessionsByUserID, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RefreshExpiresAt,
	)
	return i, err
}

const updateSessionExpiration = `-- name: UpdateSessionExpiration :one
UPDATE sessions
SET expires_at = $2
WHERE id = $1
RETURNING id, user_id, jwt_token, refresh_token, created_at, expires_at, refresh_expires_at
`

type UpdateSessionExpirationParams struct {
	ID        int32        `json:"id"`
	ExpiresAt sql.NullTime `json:"expires_at"`
}

func (q *Queries) UpdateSessionExpiration(ctx context.Context, arg UpdateSessionExpirationParams) (Session, error) {
	row := q.queryRow(ctx, q.updateSessionExpirationStmt, updateSessionExpiration, arg.ID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RefreshExpiresAt,
	)
	return i, err
}
