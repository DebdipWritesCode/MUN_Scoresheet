// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scores.sql

package db

import (
	"context"
	"database/sql"
)

const createScore = `-- name: CreateScore :one
INSERT INTO scores (
  parameter_id, delegate_id, value, note 
)
VALUES (
  $1, $2, $3, $4
)
RETURNING id, delegate_id, parameter_id, value, note
`

type CreateScoreParams struct {
	ParameterID int32          `json:"parameter_id"`
	DelegateID  int32          `json:"delegate_id"`
	Value       float64        `json:"value"`
	Note        sql.NullString `json:"note"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.queryRow(ctx, q.createScoreStmt, createScore,
		arg.ParameterID,
		arg.DelegateID,
		arg.Value,
		arg.Note,
	)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.DelegateID,
		&i.ParameterID,
		&i.Value,
		&i.Note,
	)
	return i, err
}

const deleteScore = `-- name: DeleteScore :exec
DELETE FROM scores
WHERE id = $1
`

func (q *Queries) DeleteScore(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteScoreStmt, deleteScore, id)
	return err
}

const getScoreByID = `-- name: GetScoreByID :one
SELECT id, delegate_id, parameter_id, value, note FROM scores
WHERE id = $1
`

func (q *Queries) GetScoreByID(ctx context.Context, id int32) (Score, error) {
	row := q.queryRow(ctx, q.getScoreByIDStmt, getScoreByID, id)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.DelegateID,
		&i.ParameterID,
		&i.Value,
		&i.Note,
	)
	return i, err
}

const getScoresByDelegateID = `-- name: GetScoresByDelegateID :many
SELECT id, delegate_id, parameter_id, value, note FROM scores
WHERE delegate_id = $1
ORDER BY id
`

func (q *Queries) GetScoresByDelegateID(ctx context.Context, delegateID int32) ([]Score, error) {
	rows, err := q.query(ctx, q.getScoresByDelegateIDStmt, getScoresByDelegateID, delegateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.DelegateID,
			&i.ParameterID,
			&i.Value,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoresByParameterID = `-- name: GetScoresByParameterID :many
SELECT id, delegate_id, parameter_id, value, note FROM scores
WHERE parameter_id = $1
ORDER BY id
`

func (q *Queries) GetScoresByParameterID(ctx context.Context, parameterID int32) ([]Score, error) {
	rows, err := q.query(ctx, q.getScoresByParameterIDStmt, getScoresByParameterID, parameterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.DelegateID,
			&i.ParameterID,
			&i.Value,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScore = `-- name: UpdateScore :one
UPDATE scores
SET
  value = COALESCE($1, value),
  note = COALESCE($2, note)
WHERE id = $3
RETURNING id, delegate_id, parameter_id, value, note
`

type UpdateScoreParams struct {
	Value sql.NullFloat64 `json:"value"`
	Note  sql.NullString  `json:"note"`
	ID    int32           `json:"id"`
}

func (q *Queries) UpdateScore(ctx context.Context, arg UpdateScoreParams) (Score, error) {
	row := q.queryRow(ctx, q.updateScoreStmt, updateScore, arg.Value, arg.Note, arg.ID)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.DelegateID,
		&i.ParameterID,
		&i.Value,
		&i.Note,
	)
	return i, err
}
