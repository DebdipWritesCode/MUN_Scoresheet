// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: delegates.sql

package db

import (
	"context"
)

const createDelegate = `-- name: CreateDelegate :one
INSERT INTO delegates (
  score_sheet_id, name
) VALUES (
  $1, $2
)
RETURNING id, score_sheet_id, name
`

type CreateDelegateParams struct {
	ScoreSheetID int32  `json:"score_sheet_id"`
	Name         string `json:"name"`
}

func (q *Queries) CreateDelegate(ctx context.Context, arg CreateDelegateParams) (Delegate, error) {
	row := q.queryRow(ctx, q.createDelegateStmt, createDelegate, arg.ScoreSheetID, arg.Name)
	var i Delegate
	err := row.Scan(&i.ID, &i.ScoreSheetID, &i.Name)
	return i, err
}

const deleteDelegate = `-- name: DeleteDelegate :exec
DELETE FROM delegates
WHERE id = $1
`

func (q *Queries) DeleteDelegate(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteDelegateStmt, deleteDelegate, id)
	return err
}

const getDelegateByID = `-- name: GetDelegateByID :one
SELECT id, score_sheet_id, name FROM delegates
WHERE id = $1
`

func (q *Queries) GetDelegateByID(ctx context.Context, id int32) (Delegate, error) {
	row := q.queryRow(ctx, q.getDelegateByIDStmt, getDelegateByID, id)
	var i Delegate
	err := row.Scan(&i.ID, &i.ScoreSheetID, &i.Name)
	return i, err
}

const getDelegateByScoreSheetIDAndName = `-- name: GetDelegateByScoreSheetIDAndName :one
SELECT id, score_sheet_id, name FROM delegates
WHERE score_sheet_id = $1 AND name = $2
`

type GetDelegateByScoreSheetIDAndNameParams struct {
	ScoreSheetID int32  `json:"score_sheet_id"`
	Name         string `json:"name"`
}

func (q *Queries) GetDelegateByScoreSheetIDAndName(ctx context.Context, arg GetDelegateByScoreSheetIDAndNameParams) (Delegate, error) {
	row := q.queryRow(ctx, q.getDelegateByScoreSheetIDAndNameStmt, getDelegateByScoreSheetIDAndName, arg.ScoreSheetID, arg.Name)
	var i Delegate
	err := row.Scan(&i.ID, &i.ScoreSheetID, &i.Name)
	return i, err
}

const getDelegatesByScoreSheetID = `-- name: GetDelegatesByScoreSheetID :many
SELECT id, score_sheet_id, name FROM delegates
WHERE score_sheet_id = $1
`

func (q *Queries) GetDelegatesByScoreSheetID(ctx context.Context, scoreSheetID int32) ([]Delegate, error) {
	rows, err := q.query(ctx, q.getDelegatesByScoreSheetIDStmt, getDelegatesByScoreSheetID, scoreSheetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Delegate{}
	for rows.Next() {
		var i Delegate
		if err := rows.Scan(&i.ID, &i.ScoreSheetID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDelegateName = `-- name: UpdateDelegateName :one
UPDATE delegates
SET name = $2
WHERE id = $1
RETURNING id, score_sheet_id, name
`

type UpdateDelegateNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateDelegateName(ctx context.Context, arg UpdateDelegateNameParams) (Delegate, error) {
	row := q.queryRow(ctx, q.updateDelegateNameStmt, updateDelegateName, arg.ID, arg.Name)
	var i Delegate
	err := row.Scan(&i.ID, &i.ScoreSheetID, &i.Name)
	return i, err
}
