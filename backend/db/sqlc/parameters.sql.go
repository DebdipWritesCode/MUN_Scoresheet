// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: parameters.sql

package db

import (
	"context"
	"database/sql"
)

const createParameter = `-- name: CreateParameter :one
INSERT INTO parameters (
  score_sheet_id, name, rule_type, is_special_parameter,
  special_scores_rule, special_length_rule,
  score_weight, length_weight
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, score_sheet_id, name, rule_type, is_special_parameter, special_scores_rule, special_length_rule, score_weight, length_weight
`

type CreateParameterParams struct {
	ScoreSheetID       int32           `json:"score_sheet_id"`
	Name               string          `json:"name"`
	RuleType           string          `json:"rule_type"`
	IsSpecialParameter bool            `json:"is_special_parameter"`
	SpecialScoresRule  sql.NullString  `json:"special_scores_rule"`
	SpecialLengthRule  sql.NullString  `json:"special_length_rule"`
	ScoreWeight        sql.NullFloat64 `json:"score_weight"`
	LengthWeight       sql.NullFloat64 `json:"length_weight"`
}

func (q *Queries) CreateParameter(ctx context.Context, arg CreateParameterParams) (Parameter, error) {
	row := q.queryRow(ctx, q.createParameterStmt, createParameter,
		arg.ScoreSheetID,
		arg.Name,
		arg.RuleType,
		arg.IsSpecialParameter,
		arg.SpecialScoresRule,
		arg.SpecialLengthRule,
		arg.ScoreWeight,
		arg.LengthWeight,
	)
	var i Parameter
	err := row.Scan(
		&i.ID,
		&i.ScoreSheetID,
		&i.Name,
		&i.RuleType,
		&i.IsSpecialParameter,
		&i.SpecialScoresRule,
		&i.SpecialLengthRule,
		&i.ScoreWeight,
		&i.LengthWeight,
	)
	return i, err
}

const deleteParameter = `-- name: DeleteParameter :exec
DELETE FROM parameters
WHERE id = $1
`

func (q *Queries) DeleteParameter(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteParameterStmt, deleteParameter, id)
	return err
}

const getParameterByID = `-- name: GetParameterByID :one
SELECT id, score_sheet_id, name, rule_type, is_special_parameter, special_scores_rule, special_length_rule, score_weight, length_weight FROM parameters
WHERE id = $1
`

func (q *Queries) GetParameterByID(ctx context.Context, id int32) (Parameter, error) {
	row := q.queryRow(ctx, q.getParameterByIDStmt, getParameterByID, id)
	var i Parameter
	err := row.Scan(
		&i.ID,
		&i.ScoreSheetID,
		&i.Name,
		&i.RuleType,
		&i.IsSpecialParameter,
		&i.SpecialScoresRule,
		&i.SpecialLengthRule,
		&i.ScoreWeight,
		&i.LengthWeight,
	)
	return i, err
}

const getParameterByScoreSheetIDAndName = `-- name: GetParameterByScoreSheetIDAndName :one
SELECT id, score_sheet_id, name, rule_type, is_special_parameter, special_scores_rule, special_length_rule, score_weight, length_weight FROM parameters
WHERE score_sheet_id = $1 AND name = $2
`

type GetParameterByScoreSheetIDAndNameParams struct {
	ScoreSheetID int32  `json:"score_sheet_id"`
	Name         string `json:"name"`
}

func (q *Queries) GetParameterByScoreSheetIDAndName(ctx context.Context, arg GetParameterByScoreSheetIDAndNameParams) (Parameter, error) {
	row := q.queryRow(ctx, q.getParameterByScoreSheetIDAndNameStmt, getParameterByScoreSheetIDAndName, arg.ScoreSheetID, arg.Name)
	var i Parameter
	err := row.Scan(
		&i.ID,
		&i.ScoreSheetID,
		&i.Name,
		&i.RuleType,
		&i.IsSpecialParameter,
		&i.SpecialScoresRule,
		&i.SpecialLengthRule,
		&i.ScoreWeight,
		&i.LengthWeight,
	)
	return i, err
}

const getParametersByScoreSheetID = `-- name: GetParametersByScoreSheetID :many
SELECT id, score_sheet_id, name, rule_type, is_special_parameter, special_scores_rule, special_length_rule, score_weight, length_weight FROM parameters
WHERE score_sheet_id = $1
ORDER BY id
`

func (q *Queries) GetParametersByScoreSheetID(ctx context.Context, scoreSheetID int32) ([]Parameter, error) {
	rows, err := q.query(ctx, q.getParametersByScoreSheetIDStmt, getParametersByScoreSheetID, scoreSheetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Parameter{}
	for rows.Next() {
		var i Parameter
		if err := rows.Scan(
			&i.ID,
			&i.ScoreSheetID,
			&i.Name,
			&i.RuleType,
			&i.IsSpecialParameter,
			&i.SpecialScoresRule,
			&i.SpecialLengthRule,
			&i.ScoreWeight,
			&i.LengthWeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParameter = `-- name: UpdateParameter :one
UPDATE parameters
SET
  name = COALESCE($1, name),
  rule_type = COALESCE($2, rule_type),
  is_special_parameter = COALESCE($3, is_special_parameter),
  special_scores_rule = COALESCE($4, special_scores_rule),
  special_length_rule = COALESCE($5, special_length_rule),
  score_weight = COALESCE($6, score_weight),
  length_weight = COALESCE($7, length_weight)
WHERE id = $8
RETURNING id, score_sheet_id, name, rule_type, is_special_parameter, special_scores_rule, special_length_rule, score_weight, length_weight
`

type UpdateParameterParams struct {
	Name               sql.NullString  `json:"name"`
	RuleType           sql.NullString  `json:"rule_type"`
	IsSpecialParameter sql.NullBool    `json:"is_special_parameter"`
	SpecialScoresRule  sql.NullString  `json:"special_scores_rule"`
	SpecialLengthRule  sql.NullString  `json:"special_length_rule"`
	ScoreWeight        sql.NullFloat64 `json:"score_weight"`
	LengthWeight       sql.NullFloat64 `json:"length_weight"`
	ID                 int32           `json:"id"`
}

func (q *Queries) UpdateParameter(ctx context.Context, arg UpdateParameterParams) (Parameter, error) {
	row := q.queryRow(ctx, q.updateParameterStmt, updateParameter,
		arg.Name,
		arg.RuleType,
		arg.IsSpecialParameter,
		arg.SpecialScoresRule,
		arg.SpecialLengthRule,
		arg.ScoreWeight,
		arg.LengthWeight,
		arg.ID,
	)
	var i Parameter
	err := row.Scan(
		&i.ID,
		&i.ScoreSheetID,
		&i.Name,
		&i.RuleType,
		&i.IsSpecialParameter,
		&i.SpecialScoresRule,
		&i.SpecialLengthRule,
		&i.ScoreWeight,
		&i.LengthWeight,
	)
	return i, err
}
